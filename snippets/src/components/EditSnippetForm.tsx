"use client";
// This is a CSR component since 'Editor' depends on browser-only APIs (like window, document, Worker), which donâ€™t exist on the server.

import Editor from "@monaco-editor/react";
import { useState } from "react";
import type { Snippet } from "@prisma/client"; // types are already generated by prisma
import { Button } from "./ui/button";
import * as actions from "@/actions";

const EditSnippetForm = ({ snippet }: { snippet: Snippet }) => {
  const [code, setCode] = useState(snippet.code);

  // Whenever you type in the editor, Monaco calls your function like this internally:
  // changeEventHandler("console.log('hi')");
  const changeEventHandler = (value: string = "") => {
    setCode(value);
  };

  // This is a CSR component and server actions can't be created here. All server-actions are in actions folder

  // see below
  const saveSnippetAction = actions.saveSnippet.bind(null, snippet.id, code);

  return (
    <div className="flex flex-col gap-4">
      <form
        action={saveSnippetAction}
        className="flex justify-between items-center"
      >
        <h1 className="font-bold text-xl">Your Code Editor:</h1>
        <Button type="submit" className="bg-black text-white">
          Save
        </Button>
      </form>
      <Editor
        height="40vh"
        defaultLanguage="javascript"
        defaultValue={code}
        theme="vs-dark"
        onChange={changeEventHandler}
      />
    </div>
  );
};

export default EditSnippetForm;

/*
Why we use .bind() instead of just a simple function call ?


.bind() method returns a new function, saveSnippetAction() is that function. This fn will get called when user
click on 'Save' button. 

Why the value is null ?
Because .bind() method decide the value of the 'this' keyword. See the below code to understand in much better way

const person = {
  name: 'Anu',
  greet: function {
    console.log(`Hi, my name is ${this.name}`)
  }
}

console.log(person.greet());  // Hi, my name is Anu

=> But, if we use bind

const myGreeting = person.greet;
myGreeting() // Hi, my name is undefined


=> Why undefined ?
Because the value of 'this' is undefined in strict mode and window object in not strict mode.

IF WE USE BIND METHOD, 

const myGreeting = person.greet(person);
myGreeting();  // Hi, my name is undefined

.bind() returns a new function which is 'myGreeting' in our cae, and .bind() let you decide what to do with 
the 'this' keyword. The first argument points where you want 'this' keyword to point. 
In our case, that is 'person' object.


Since the value of the 'this' keyword is null, it means javascript will ignore it (or don't care) and fall back to the 
default 'this' behavior. In modern framework like react, next and node, JS run in strict mode by default

*/
